# docker-compose.yml
version: '3.8'

services:
  disa_stig_tool:
    build:
      context: ./scripts
      dockerfile: disa_stig_tool.Dockerfile
    ports:
      - "3001:3000"
    volumes:
      - ./artifacts:/app/artifacts
    environment:
      - ARTIFACTS_DIR=/app/artifacts/downloads

  mitre_baseline_tool:
    build:
      context: ./scripts
      dockerfile: mitre_baseline_tool.Dockerfile
    ports:
      - "3002:3000"
    volumes:
      - ./artifacts:/app/artifacts
    environment:
      - ARTIFACTS_DIR=/app/artifacts/downloads
      - GITHUB_TOKEN=${GITHUB_TOKEN} # Inject GitHub token for API calls

  saf_generator_tool:
    build:
      context: .
      dockerfile: tools/saf_generator_tool.Dockerfile
    ports:
      - "3003:3000"
    volumes:
      - ./artifacts:/app/artifacts
    environment:
      - ARTIFACTS_DIR=/app/artifacts/generated
      - NODE_ENV=production
    # Using Node.js environment for SAF CLI
    # SAF CLI is installed via npm: npm install -g @mitre/saf

  inspec_runner_tool:
    build:
      context: .
      dockerfile: tools/inspec_runner_tool.Dockerfile
    ports:
      - "3005:3000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./artifacts:/app/artifacts
    environment:
      - ARTIFACTS_DIR=/app/artifacts/generated
      - CHEF_LICENSE=accept-silent
    # Using official chef/inspec Docker image
    # Makes it easier to execute InSpec profiles
    depends_on:
      - docker_tool

  docker_tool:
    build:
      context: ./scripts
      dockerfile: docker_tool.Dockerfile
    ports:
      - "3004:3000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./artifacts:/app/artifacts
    environment:
      - ARTIFACTS_DIR=/app/artifacts/downloads
    privileged: true # Needed for Docker-in-Docker functionality

  # The ChromaDB Vector Database
  # This service stores the "memories" of successful code.
  chromadb:
    image: chromadb/chroma
    ports:
      # Expose Chroma's port 8000 to the host machine's port 8000
      - "8000:8000"
    volumes:
      # This mounts a local directory into the container.
      # It makes the ChromaDB data persistent across restarts.
      - ./artifacts/chroma_data:/chroma
    # Healthcheck to ensure other services wait until Chroma is ready
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 5s
      timeout: 10s
      retries: 10

  # The Memory Tool MCP Service
  # This is the "hands" of the agent, providing a simple API to the ChromaDB brain.
  memory-tool:
    build:
      context: .
      # We assume you have a generic Dockerfile for your python tools.
      # If not, you'll need to create one.
      dockerfile: ./agents/src/saf_gen/mcp/Dockerfile
    command: ["python", "agents/src/saf_gen/mcp/memory_tool.py"]
    ports:
      - "3006:3006" # Expose memory-tool on host port 3006
    depends_on:
      chromadb:
        condition: service_healthy # This service will wait for ChromaDB to be ready
